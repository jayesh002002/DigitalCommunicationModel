%----------------------------------------------------%----------------- Demodulator ----------------------%----------------------------------------------------Rx_I = Rx .* (sqrt(2)*cos(2*pi*Fc_tx*t+phase_tx));Rx_Q = Rx .* (-sqrt(2)*sin(2*pi*Fc_tx*t+phase_tx));%----------------------------------------------------%----------------- Low Pass Filter ------------------%----------------------------------------------------B = [545893497809.8805-323309818948.18756-821730433430.3142-300885313790.1393580694000360.6991949443433619.1342226570371966.16858-630372170890.2959-561401632314.1545158314062164.62885353568006905.9332158314062164.62885-561401632314.1545-630372170890.2959226570371966.16858949443433619.1342580694000360.6991-300885313790.1393-821730433430.3142-323309818948.18756545893497809.8805];A = 1;Rx_I_LPF = filter(B,A,Rx_I);%----------------------------------------------------%----------------- Upsampling -----------------------%----------------------------------------------------for i = 1:length(mappedSymbols)  receivedSymbols_I(i) = Rx_I((i-1)*upscaling_factor + 1);  receivedSymbols_Q(i) = Rx_Q((i-1)*upscaling_factor + 1);endreceivedSymbols = receivedSymbols_I + j*receivedSymbols_Q;%----------------------------------------------------%----------------- QAM Demapper ---------------------%----------------------------------------------------% Map symbols to bitsfor i = 1:length(receivedSymbols)       [diff receivedSymbolsIndex(i)] = min( receivedSymbols(i) - mappingTable) ; endforreceivedSymbolsIndex = receivedSymbolsIndex - 1;%dataOut = zeros(24, 1);  for i = 1:length(receivedSymbols)        dataOut(i*2 - 1)  = rem(floor(receivedSymbolsIndex(i)/2), 2);    dataOut(i*2)      = rem(receivedSymbolsIndex(i), 2);endfor%----------------------------------------------------%----------------- Bit Error Rate -------------------%----------------------------------------------------BER = 0;for i = 1:length(dataIn)        if dataIn(i) != dataOut(i)       BER++;    endifendfor%----------------------------------------------------%----------------- Figures --------------------------%----------------------------------------------------figure(13);plot(Rx_I);figure(14);plot(Rx_I_LPF);##figure(11)##scatter(real(receivedSymbols), imag(receivedSymbols) , "filled");##axis([-2 2 -2 2])##title("Received Symbols")##figure(12)##stem(dataOut,"filled");##title('Data Out');##xlabel('Bit Index');##ylabel('Binary Value');