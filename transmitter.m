clear all;close all;%----------------------------------------------------%---------------- Initial Parameters ----------------%----------------------------------------------------n = 8;                              %number of bitsM = 4;                              %4-QAMk = log2(M);                        %number of bits in one symbolm = n/k;                            %number of symbolsif mod(n, k) ~= 0    error('numberOfBits must be a multiple of log2(M).');endFc_tx = 100;                        %carrier frequencyphase_tx = 0;                       %carrier phaseFs = 1000;                          %sampling frequencydt = 1/Fs;                          %simulation time differentialRs = 10;                            %Symbol rateOSF = Fs/Rs;                        %Oversampling factor%----------------------------------------------------%----------------Creation of the bitstream ----------%----------------------------------------------------dataIn = randi(2,1,n) - 1;  % Generate vector of binary datadataIn = [0 0 1 1 1 0 0 1];%----------------------------------------------------%----------------- QAM Mapper -----------------------%----------------------------------------------------numberOfSymbols = length(dataIn)/k; %number of symbols in the FIFO% Define mapping table applying Gray mappingmappingTable(1) =  1 + 1*i;mappingTable(2) = -1 + 1*i;mappingTable(3) =  1 - 1*i;mappingTable(4) = -1 - 1*i;mappedSymbols = zeros(1, numberOfSymbols);% Map bits to symbolsfor i = 1:k:length(dataIn)     symbolBits = dataIn(i:i+k-1);  symbolIndex = 2^1 * symbolBits(1) + 2^0 * symbolBits(2);     % Mapping   mappedSymbols((i - 1)/k + 1) = mappingTable( symbolIndex + 1);   endfor%----------------------------------------------------%----------------- Upsampling -----------------------%----------------------------------------------------t = 0 : dt : (length(mappedSymbols) * OSF - 1) * dt;for i = 1:length(mappedSymbols)    temp = mappedSymbols(i)*ones(1,OSF);    mappedSymbols_upsampled( (i-1)*OSF+1 : i*OSF) = temp;end%----------------------------------------------------%----------------- Modulation: Baseband to RF -------%----------------------------------------------------Tx_I = real(mappedSymbols_upsampled) .* (sqrt(2)*cos(2*pi*Fc_tx*t+phase_tx));Tx_Q = imag(mappedSymbols_upsampled) .* (sqrt(2)*sin(2*pi*Fc_tx*t+phase_tx));Tx = Tx_I - Tx_Q;%----------------------------------------------------%----------------- Figures --------------------------%----------------------------------------------------##figure(1);##stem(dataIn,"filled");##title('Data In');##xlabel('Bit Index');##ylabel('Binary Value');##figure(2);##subplot(2,1,1);##stem(real(mappedSymbols));##title("Real part")##subplot(2,1,2);##stem(imag(mappedSymbols));##title("Imaginary part");##figure(3);##scatter(real(mappedSymbols), imag(mappedSymbols) , "filled");##axis([-2 2 -2 2]);##title("Symbols");##figure(4);##subplot(3,1,1);##stem(real(mappedSymbols));##subplot(3,1,2);##stem(real(mappedSymbols_upsampled));##subplot(3,1,3);##plot(Tx_I);figure(5);subplot(3,1,1);plot(Tx_I);##subplot(3,1,2);##plot(Tx_Q);##subplot(3,1,3);##plot(Tx);